/*
 * Generated by erpcgen 1.13.0 on Wed Mar 26 05:10:01 2025.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "remote_display_server.hpp"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include <new>
#include "erpc_port.h"
#endif
#include "erpc_manually_constructed.hpp"

#if 11300 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;
using namespace erpcShim;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif


//! @brief Function to read struct Context
static void read_Context_struct(erpc::Codec * codec, Context * data);

//! @brief Function to read struct Command
static void read_Command_struct(erpc::Codec * codec, Command * data);


// Read struct Context function implementation
static void read_Context_struct(erpc::Codec * codec, Context * data)
{
    int32_t _tmp_local_i32;

    if(NULL == data)
    {
        return;
    }

    codec->read(_tmp_local_i32);
    data->current_state = static_cast<State>(_tmp_local_i32);

    codec->read(_tmp_local_i32);
    data->previous_state = static_cast<State>(_tmp_local_i32);

    codec->read(_tmp_local_i32);
    data->mode = static_cast<Mode>(_tmp_local_i32);
}

// Read struct Command function implementation
static void read_Command_struct(erpc::Codec * codec, Command * data)
{
    if(NULL == data)
    {
        return;
    }

    read_Context_struct(codec, &(data->context));

    codec->read(data->data);
}



DisplayInterface_service::DisplayInterface_service(DisplayInterface_interface *_DisplayInterface_interface)
    : erpc::Service(DisplayInterface_interface::m_serviceId)
    , m_handler(_DisplayInterface_interface)
{
}

DisplayInterface_service::~DisplayInterface_service()
{
}

// return service interface handler.
DisplayInterface_interface* DisplayInterface_service::getHandler(void)
{
    return m_handler;
}

// Call the correct server shim based on method unique ID.
erpc_status_t DisplayInterface_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory, Transport * transport)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case DisplayInterface_interface::m_sendDisplayCommandId:
        {
            erpcStatus = sendDisplayCommand_shim(codec, messageFactory, transport, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for sendDisplayCommand of DisplayInterface interface.
erpc_status_t DisplayInterface_service::sendDisplayCommand_shim(Codec * codec, MessageBufferFactory *messageFactory, Transport * transport, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    Command *cmd = NULL;
    cmd = (Command *) erpc_malloc(sizeof(Command));
    if (cmd == NULL)
    {
        codec->updateStatus(kErpcStatus_MemoryError);
    }

    // startReadMessage() was already called before this shim was invoked.

    read_Command_struct(codec, cmd);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        m_handler->sendDisplayCommand(cmd);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif
    }

    erpc_free(cmd);

    return err;
}
